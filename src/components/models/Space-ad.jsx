/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 -T space-ad.glb 
Files: space-ad.glb [172.02KB] > space-ad-transformed.glb [52.33KB] (70%)
*/

import React, { useRef } from 'react'
import { Clone, useGLTF } from '@react-three/drei'
import { useSpring, animated } from '@react-spring/three'

function TunnelAd(props) {
  const { nodes, materials } = useGLTF('/gltf/space-ad-transformed.glb')
  const light = useRef()
  const mesh = useRef()

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={mesh}
        geometry={nodes.LogoPane.geometry}
        material={materials['Material.001']}
        position={[0, 0, 3]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={10}
      >
        <pointLight
          ref={light}
          color={"#4d9be6"}
          power={1000}
          distance={12}
          position={[-0.75, -0.35, 0]}
        />
      </mesh>
    </group>
  )
}

function TunnelAds(props) {
  const { nodes, materials } = useGLTF('/gltf/space-ad-transformed.glb')
  const clones = []
  const pieces = 1
  const offsetZ = 150 // where the animation starts

  const { position } = useSpring({
    from: {
      position: [0, 0, -offsetZ]
    },
    to: {
      position: [0, 0, 0]
    },
    config: {
      duration: 1000 * 4
    },
    loop: true
  })

  for (let i = 0; i < pieces; i += 2) {
    clones.push(
      // <Clone 
      //   key={i}
      //   object={nodes.LogoPane}
      //   position={[10, 0, -spacing * i]}
      //   rotation={[0, i % 2 == 0 ? Math.PI : 0, 0]}
      // />

      <TunnelAd
        key={i}
        position={[10, 0, -offsetZ * i]}
        rotation={[0, i % 2 == 0 ? Math.PI : 0, 0]}
      />
    )
    clones.push(
      <TunnelAd
        key={i + 1}
        position={[-10, 0, -offsetZ * i]}
        rotation={[0, (i + 1) % 2 == 0 ? Math.PI : 0, 0]}
      />
    )
  }

  return (
    <animated.group position={position}>
      {clones}
    </animated.group>
  )
}

export default TunnelAds

useGLTF.preload('/gltf/space-ad-transformed.glb')
