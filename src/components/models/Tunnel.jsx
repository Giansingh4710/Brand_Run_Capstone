/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 -T tunnel.glb 
Files: tunnel.glb [28.78KB] > tunnel-transformed.glb [2.48KB] (91%)
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { MeshPhongMaterial } from 'three'
import { useFrame } from '@react-three/fiber'
import { useSpring, animated } from '@react-spring/three'

function Tunnel(props) {
  const { nodes, materials } = useGLTF('/gltf/tunnel-transformed.glb')
  const modelRef = useRef()

  const material = new MeshPhongMaterial({
    color: "#ffffff"
  })

  // useFrame(() => {
  //   modelRef.current.rotation.z -= 0.001
  // })

  return (
    <group {...props} ref={modelRef} dispose={null}>
      <mesh 
      geometry={nodes.Arch.geometry} 
      material={material} 
      position={[0, 0, -0.5]} 
      rotation={[-Math.PI / 2, 0, 0]} 
      scale={2.5} />
    </group>
  )
}

function Tunnels(props) {
  const clones = []
  const pieces = 12
  const width = 240

  const { position } = useSpring({
    from: {
      posZ: [0, 0, -width]
    },
    to: {
      posZ: [0, 0, width]
    },
    config: {
      duration: 1000 * 8
    },
    loop: true,
    reverse: props.reversing
  })

  for (let i = -1; i < pieces; i++) {
    clones.push(
      <Tunnel
        key={i}
        position={[0, 0, -width * i]}
      >

      </Tunnel>
    )
  }

  return (
    <animated.group>
      {clones}
    </animated.group>
  )
}

export default Tunnels

useGLTF.preload('/gltf/tunnel-transformed.glb')
