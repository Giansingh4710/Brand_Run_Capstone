/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 -T runner.glb
Files: runner.glb [2.77MB] > runner-transformed.glb [474.83KB] (83%)
*/

import * as THREE from 'three'
import React, { forwardRef, useEffect, useRef, useState } from 'react'
import { Box, Outlines, Trail, useAnimations, useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { Trails } from '../PowerupTrails'
import { animated, config, useSpring } from '@react-spring/three'
import { setUpdateRange } from '@react-three/drei/helpers/deprecated'
import { useStore } from '../../store'

const Runner = forwardRef((props, ref) => {
  const { nodes, animations } = useGLTF('/gltf/runner-transformed.glb')
  const { actions } = useAnimations(animations, props.innerRef)

  const [outlineColor, setOutlineColor] = useState('white')
  const [trailsWidth, setTrailsWidth] = useState(0)
  const invinciblePowerUp = useStore((state) => state.invinciblePowerUp)

  props.actionsRef.current = actions
  props.outlineColorRef.current = outlineColor

  const material = new THREE.MeshStandardMaterial({
    color: '#ffffff',
    metalness: 0.25,
    roughness: 0.7,
    transparent: true,
    opacity: invinciblePowerUp ? 0.3 : 1,
  })

  const jointsMaterial = new THREE.MeshStandardMaterial({
    color: '#2e222f',
  })

  const { trailsScale, trailsRotation } = useSpring({
    from: {
      trailsScale: 0.2,
      trailsRotation: [0, 0, 0],
    },
    to: [
      {
        trailsScale: 2000,
        trailsRotation: [0, Math.PI * 2, 0],
      },
      {
        trailsScale: 0.2,
        trailsRotation: [0, Math.PI * 4, 0],
      },
    ],
    config: {
      duration: 800,
    },
  })

  useFrame(() => {
    if (props.outlineColorRef.current != outlineColor) {
      console.log('outline color changed to ' + props.outlineColorRef.current)
      setOutlineColor(props.outlineColorRef.current)
      setTrailsWidth(1)
      setTimeout(() => {
        setTrailsWidth(0)
        setOutlineColor('white')
      }, 3000)
    }
  })

  return (
    <group ref={props.innerRef} {...props} dispose={null} scale={1}>
      <group name='Scene'>
        <group name='Armature' rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
        </group>
        <skinnedMesh
          name='Alpha_Joints'
          geometry={nodes.Alpha_Joints.geometry}
          material={jointsMaterial}
          skeleton={nodes.Alpha_Joints.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name='Alpha_Surface'
          geometry={nodes.Alpha_Surface.geometry}
          material={material}
          skeleton={nodes.Alpha_Surface.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        >
          <Outlines
            color={outlineColor}
            thickness={2}
            visible={trailsWidth > 0}
          />
          <animated.group
            scale={trailsScale}
            rotation={trailsRotation}
            position={[0, 0, -130]}
          >
            <Trails color={outlineColor} width={trailsWidth} />
          </animated.group>
        </skinnedMesh>
      </group>
    </group>
  )
})

useGLTF.preload('/gltf/runner-transformed.glb')

export default Runner
